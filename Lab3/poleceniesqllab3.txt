Zadanie 1
DECLARE
  numer_max NUMBER;
  nowy_numer NUMBER;
  nowy_departament_name departments.department_name%TYPE := 'EDUCATION';
  
BEGIN
  SELECT MAX(department_id) INTO numer_max FROM departments;
  
  nowy_numer := numer_max + 10;
  
  INSERT INTO departments (department_id, department_name)
  VALUES (nowy_numer, nowy_departament_name);
  
  COMMIT;
END;

Zadanie 2
DECLARE
  numer_max NUMBER;
  nowy_numer NUMBER;
  nowy_departament_name departments.department_name%TYPE := 'EDUCATION';
  nowy_location_id NUMBER := 3000; 

BEGIN
  SELECT MAX(department_id) INTO numer_max FROM departments;
  
  nowy_numer := numer_max + 10;
  
  INSERT INTO departments (department_id, department_name, location_id)
  VALUES (nowy_numer, nowy_departament_name, nowy_location_id);
  
  COMMIT;
END;

Zadanie 3
CREATE TABLE nowa_tabela (
  wartosc VARCHAR2(10)
);
DECLARE
  liczby NUMBER;
BEGIN
  FOR liczby IN 1..10 LOOP
    IF liczby NOT IN (4, 6) THEN
      INSERT INTO nowa_tabela (wartosc) VALUES (TO_CHAR(liczby));
    END IF;
  END LOOP;
  COMMIT;
END;

Zadanie 4
SET SERVEROUTPUT ON;

DECLARE
  zmienna COUNTRIES%ROWTYPE;
BEGIN
  SELECT * INTO zmienna FROM COUNTRIES WHERE COUNTRY_ID = 'CA';
  
  DBMS_OUTPUT.PUT_LINE('Nazwa kraju: ' || zmienna.COUNTRY_NAME);
  DBMS_OUTPUT.PUT_LINE('ID regionu: ' || zmienna.REGION_ID);
END;

Zadanie 5
SET SERVEROUTPUT ON;

DECLARE
  TYPE dep_table IS TABLE OF VARCHAR2(30) INDEX BY PLS_INTEGER;
  dep_names dep_table; 
  i PLS_INTEGER := 10;
BEGIN
  FOR j IN 1..27 LOOP
    IF MOD(i, 10) = 0 THEN
      SELECT DEPARTMENT_NAME
      INTO dep_names(i)
      FROM DEPARTMENTS
      WHERE DEPARTMENT_ID = i;
    END IF;
    i := i + 10;
  END LOOP;

  FOR k IN 10..100 LOOP
    IF dep_names.EXISTS(k) THEN
      DBMS_OUTPUT.PUT_LINE(dep_names(k)); 
    END IF;
  END LOOP;
END;
/

Zadanie 6
SET SERVEROUTPUT ON;

DECLARE
  TYPE dep_table IS TABLE OF DEPARTMENTS%ROWTYPE INDEX BY PLS_INTEGER;
  dep_names dep_table; 
  i PLS_INTEGER := 10;
BEGIN
  FOR j IN 1..27 LOOP
    IF MOD(i, 10) = 0 THEN
      SELECT *
      INTO dep_names(i)
      FROM DEPARTMENTS
      WHERE DEPARTMENT_ID = i;
    END IF;
    i := i + 10;
  END LOOP;

  FOR k IN 10..100 LOOP
    IF dep_names.EXISTS(k) THEN
      DBMS_OUTPUT.PUT_LINE('DEPARTMENT_ID: ' || dep_names(k).DEPARTMENT_ID);
      DBMS_OUTPUT.PUT_LINE('DEPARTMENT_NAME: ' || dep_names(k).DEPARTMENT_NAME);
      DBMS_OUTPUT.PUT_LINE('MANAGER_ID: ' || dep_names(k).MANAGER_ID);
      DBMS_OUTPUT.PUT_LINE('LOCATION_ID: ' || dep_names(k).LOCATION_ID);
      DBMS_OUTPUT.PUT_LINE('------------------------------');
    END IF;
  END LOOP;
END;
/

Zadanie 7
SET SERVEROUTPUT ON;
DECLARE
  CURSOR c_employee_salary IS
    SELECT e.LAST_NAME, e.SALARY
    FROM "EMPLOYEES" e
    WHERE e.DEPARTMENT_ID = 50;

  v_last_name "EMPLOYEES"."LAST_NAME"%TYPE;
  v_salary "EMPLOYEES"."SALARY"%TYPE;

BEGIN
  OPEN c_employee_salary;
  LOOP
    FETCH c_employee_salary INTO v_last_name, v_salary;
    EXIT WHEN c_employee_salary%NOTFOUND;
    IF v_salary > 3100 THEN
      DBMS_OUTPUT.PUT_LINE(v_last_name || ' - nie dawać podwyżki');
    ELSE
      DBMS_OUTPUT.PUT_LINE(v_last_name || ' - dać podwyżkę');
    END IF;
  END LOOP;
  CLOSE c_employee_salary;
END;
/

Zadanie 8 (a i b)
SET SERVEROUTPUT ON;
DECLARE
  v_min_salary NUMBER := 0; 
  v_max_salary NUMBER := 0; 
  v_name_part VARCHAR2(20); 
  
  CURSOR c_employee_salaries (min_salary NUMBER, max_salary NUMBER, name_part VARCHAR2) IS
    SELECT e.FIRST_NAME, e.LAST_NAME, e.SALARY
    FROM "EMPLOYEES" e
    WHERE (e.SALARY BETWEEN min_salary AND max_salary)
    AND (UPPER(e.FIRST_NAME) LIKE UPPER('%' || name_part || '%'));

  v_first_name "EMPLOYEES"."FIRST_NAME"%TYPE;
  v_last_name "EMPLOYEES"."LAST_NAME"%TYPE;
  v_salary "EMPLOYEES"."SALARY"%TYPE;

BEGIN
  v_min_salary := 1000;
  v_max_salary := 5000;
  v_name_part := 'a'; 
  
  OPEN c_employee_salaries(v_min_salary, v_max_salary, v_name_part);
  DBMS_OUTPUT.PUT_LINE('Pracownicy z zarobkami od ' || v_min_salary || ' do ' || v_max_salary || 
                      ' i częścią imienia ' || v_name_part || ':');
  LOOP
    FETCH c_employee_salaries INTO v_first_name, v_last_name, v_salary;
    EXIT WHEN c_employee_salaries%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_first_name || ' ' || v_last_name || ' - Zarobki: ' || v_salary);
  END LOOP;

  CLOSE c_employee_salaries;

  v_min_salary := 5000;
  v_max_salary := 20000;
  v_name_part := 'u'; 
  
  OPEN c_employee_salaries(v_min_salary, v_max_salary, v_name_part);
  DBMS_OUTPUT.PUT_LINE('Pracownicy z zarobkami od ' || v_min_salary || ' do ' || v_max_salary || 
                      ' i częścią imienia ' || v_name_part || ':');
  LOOP
    FETCH c_employee_salaries INTO v_first_name, v_last_name, v_salary;
    EXIT WHEN c_employee_salaries%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_first_name || ' ' || v_last_name || ' - Zarobki: ' || v_salary);
  END LOOP;

  CLOSE c_employee_salaries;
END;
/

Zadanie 9
a)
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE add_job (
  proc_a_job_id IN "JOBS"."JOB_ID"%TYPE,
  proc_a_job_title IN "JOBS"."JOB_TITLE"%TYPE
) AS
BEGIN
  INSERT INTO "JOBS" ("JOB_ID", "JOB_TITLE")
  VALUES (proc_a_job_id, proc_a_job_title);
  COMMIT;
    DBMS_OUTPUT.PUT_LINE('Dodano nową pracę');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Błąd: Wystąpił nieznany wyjątek');
    DBMS_OUTPUT.PUT_LINE('Error Code: ' || SQLCODE);
    DBMS_OUTPUT.PUT_LINE('Error Message: ' || SQLERRM);
END add_job;
/

BEGIN
  add_job('Test2','Test2');
END;
/

BEGIN
    add_job('Test3',NULL);
END;
/

Zadanie 9
b)
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE modify_job_title (
    p_job_id IN VARCHAR2,
    p_new_title IN VARCHAR2
)
IS
    v_error_code NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_error_code
    FROM JOBS
    WHERE JOB_ID = p_job_id;
    
    IF v_error_code = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No Jobs updated');
    ELSE
        UPDATE JOBS
        SET JOB_TITLE = p_new_title
        WHERE JOB_ID = p_job_id;
        COMMIT;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error Code: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error Message: ' || SQLERRM);
END;
/

BEGIN
    modify_job_title('Test', 'Testb');
END;
/

Zadanie 9
c) 
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE delete_job (
    p_job_id IN VARCHAR2
)
IS
    v_error_code NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_error_code
    FROM JOBS
    WHERE JOB_ID = p_job_id;
    
    IF v_error_code = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'No Jobs deleted');
    ELSE
        DELETE FROM JOBS
        WHERE JOB_ID = p_job_id;
        COMMIT;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error Code: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error Message: ' || SQLERRM);
END;
/

BEGIN
    delete_job('Test');
END;

Zadanie 9
d)
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE get_salary_and_lastname (
    p_employee_id IN NUMBER,
    p_salary OUT NUMBER,
    p_last_name OUT VARCHAR2
)
IS
BEGIN
    SELECT SALARY, LAST_NAME
    INTO p_salary, p_last_name
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = p_employee_id;

EXCEPTION
    WHEN OTHERS THEN
        p_salary := NULL;
        p_last_name := NULL;
END;
/

DECLARE
    v_salary NUMBER;
    v_last_name VARCHAR2(25);
BEGIN
    get_salary_and_lastname(1, v_salary, v_last_name); 
    IF v_salary IS NOT NULL AND v_last_name IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('Zarobki: ' || v_salary);
        DBMS_OUTPUT.PUT_LINE('Nazwisko: ' || v_last_name);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Pracownik o podanym EMPLOYEE_ID nie został znaleziony.');
    END IF;
END;
/

Zadanie 9
e)
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE add_row_employee (
    p_salary IN NUMBER DEFAULT 0
)
IS
BEGIN
    IF p_salary > 20000 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Salary Too High');
    ELSE
        INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID, SALARY)
        VALUES (EM_SEQ.NEXTVAL, 'Karolina', 'Maliszewska', 'karolinam@gmail.com', SYSDATE, 'MK_REP', p_salary);
        COMMIT;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error Code: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error Message: ' || SQLERRM);
END;
/

BEGIN
  add_row_employee(15000); 
END;
/



