Zadanie 1
CREATE OR REPLACE PACKAGE PACZKA1 AS

  PROCEDURE add_row_employee(p_salary IN NUMBER DEFAULT 0);
  PROCEDURE delete_job(p_job_id IN VARCHAR2);
  PROCEDURE get_salary_and_lastname(p_employee_id IN NUMBER, p_salary OUT NUMBER, p_last_name OUT VARCHAR2);
  PROCEDURE modify_job_title(p_job_id IN VARCHAR2, p_new_title IN VARCHAR2);
  PROCEDURE procedura_a(proc_a_job_id IN JOBS.JOB_ID%TYPE, proc_a_job_title IN JOBS.JOB_TITLE%TYPE);

  FUNCTION CiagZnakow(id_tekst VARCHAR2) RETURN VARCHAR2;
  FUNCTION LiczbaPracownikow(nazwa_kraju VARCHAR2) RETURN VARCHAR2;
  FUNCTION NazwaPracy(id_pracy VARCHAR2) RETURN VARCHAR2;
  FUNCTION NumerKierunkowy(nr_telefonu VARCHAR2) RETURN VARCHAR2;
  FUNCTION PeselNaDate(pesel VARCHAR2) RETURN DATE;
  FUNCTION PobierzNazwePracy(id_pracy VARCHAR2) RETURN VARCHAR2;
  FUNCTION RoczneZarobki(id_pracownika NUMBER) RETURN NUMBER;
END PACZKA1;
/

CREATE OR REPLACE PACKAGE BODY PACZKA1 AS

  PROCEDURE add_row_employee(p_salary IN NUMBER DEFAULT 0) IS
  BEGIN
    IF p_salary > 20000 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Salary Too High');
    ELSE
        INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID, SALARY)
        VALUES (EM_SEQ.NEXTVAL, 'Karolina', 'Maliszewska', 'karolinam@gmail.com', SYSDATE, 'MK_REP', p_salary);
        COMMIT;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error Code: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error Message: ' || SQLERRM);
  END add_row_employee;

  PROCEDURE delete_job(p_job_id IN VARCHAR2) IS
    v_error_code NUMBER;
  BEGIN
    SELECT COUNT(*)
    INTO v_error_code
    FROM JOBS
    WHERE JOB_ID = p_job_id;

    IF v_error_code = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'No Jobs deleted');
    ELSE
        DELETE FROM JOBS
        WHERE JOB_ID = p_job_id;
        COMMIT;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error Code: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error Message: ' || SQLERRM);
  END delete_job;

  PROCEDURE get_salary_and_lastname(p_employee_id IN NUMBER, p_salary OUT NUMBER, p_last_name OUT VARCHAR2) IS
  BEGIN
    SELECT SALARY, LAST_NAME
    INTO p_salary, p_last_name
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = p_employee_id;

  EXCEPTION
    WHEN OTHERS THEN
        p_salary := NULL;
        p_last_name := NULL;
  END get_salary_and_lastname;

  PROCEDURE modify_job_title(p_job_id IN VARCHAR2, p_new_title IN VARCHAR2) IS
    v_error_code NUMBER;
  BEGIN
    SELECT COUNT(*)
    INTO v_error_code
    FROM JOBS
    WHERE JOB_ID = p_job_id;

    IF v_error_code = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No Jobs updated');
    ELSE
        UPDATE JOBS
        SET JOB_TITLE = p_new_title
        WHERE JOB_ID = p_job_id;
        COMMIT;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error Code: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error Message: ' || SQLERRM);
  END modify_job_title;

  PROCEDURE procedura_a(proc_a_job_id IN JOBS.JOB_ID%TYPE, proc_a_job_title IN JOBS.JOB_TITLE%TYPE) IS
  BEGIN
    INSERT INTO JOBS (JOB_ID, JOB_TITLE)
    VALUES (proc_a_job_id, proc_a_job_title);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Dodano nową pracę');
  EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: Wystąpił nieznany wyjątek');
        DBMS_OUTPUT.PUT_LINE('Error Code: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error Message: ' || SQLERRM);
  END procedura_a;

  -- Functions
  FUNCTION CiagZnakow(id_tekst VARCHAR2) RETURN VARCHAR2 IS
    wynik VARCHAR2(100);
  BEGIN
    wynik := INITCAP(SUBSTR(id_tekst, 1, 1)) || LOWER(SUBSTR(id_tekst, 2, LENGTH(id_tekst) - 2)) || INITCAP(SUBSTR(id_tekst, LENGTH(id_tekst), 1));
    RETURN wynik;
  END CiagZnakow;

  FUNCTION LiczbaPracownikow(nazwa_kraju VARCHAR2) RETURN VARCHAR2 IS
    liczba_pracownikow NUMBER;
    liczba_departamentow NUMBER;
  BEGIN
    IF nazwa_kraju IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie podano nazwy kraju.');
    END IF;

    SELECT COUNT(*) INTO liczba_pracownikow
    FROM EMPLOYEES e
    JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
    JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
    JOIN COUNTRIES c ON l.COUNTRY_ID = c.COUNTRY_ID
    WHERE c.COUNTRY_NAME = nazwa_kraju;

    SELECT COUNT(*) INTO liczba_departamentow
    FROM DEPARTMENTS d
    JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
    JOIN COUNTRIES c ON l.COUNTRY_ID = c.COUNTRY_ID
    WHERE c.COUNTRY_NAME = nazwa_kraju;

    RETURN 'Liczba pracowników w kraju ' || nazwa_kraju || ': ' || liczba_pracownikow || ', liczba departamentów w kraju ' || nazwa_kraju || ': ' || liczba_departamentow;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Podany kraj nie istnieje w bazie danych.');
  END LiczbaPracownikow;

  FUNCTION NazwaPracy(id_pracy VARCHAR2) RETURN VARCHAR2 IS
    nazwa VARCHAR2(35);
  BEGIN
    SELECT JOB_TITLE INTO nazwa
    FROM JOBS
    WHERE JOB_ID = id_pracy;

    RETURN nazwa;
  END NazwaPracy;

  FUNCTION NumerKierunkowy(nr_telefonu VARCHAR2) RETURN VARCHAR2 IS
    numer_kierunkowy VARCHAR2(10);
    caly_numer_telefonu VARCHAR2(30);
  BEGIN
    numer_kierunkowy := '+' || REGEXP_SUBSTR(nr_telefonu, '(\d{1,3})', 1, 1, NULL, 1);
    caly_numer_telefonu := '(' || numer_kierunkowy || ') ' || SUBSTR(nr_telefonu, LENGTH(numer_kierunkowy) + 2);
    RETURN caly_numer_telefonu;
  END NumerKierunkowy;

  FUNCTION PeselNaDate(pesel VARCHAR2) RETURN DATE IS
    rok NUMBER;
    miesiac NUMBER;
    dzien NUMBER;
    data_urodzenia DATE;
  BEGIN
    rok := TO_NUMBER(SUBSTR(pesel, 1, 2));
    miesiac := TO_NUMBER(SUBSTR(pesel, 3, 2));
    dzien := TO_NUMBER(SUBSTR(pesel, 5, 2));

    IF miesiac > 12 THEN
        miesiac := miesiac - 20;
        rok := rok + 2000;
    ELSE
        rok := rok + 1900;
    END IF;

    data_urodzenia := TO_DATE(rok || '-' || LPAD(miesiac, 2, '0') || '-' || LPAD(dzien, 2, '0'), 'yyyy-mm-dd');
    RETURN data_urodzenia;
  END PeselNaDate;

  FUNCTION PobierzNazwePracy(id_pracy VARCHAR2) RETURN VARCHAR2 IS
    nazwa_pracy VARCHAR2(35);
  BEGIN
    SELECT JOB_TITLE INTO nazwa_pracy
    FROM JOBS
    WHERE JOB_ID = id_pracy;

    IF nazwa_pracy IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Praca o identyfikatorze ' || id_pracy || ' nie istnieje.');
    END IF;

    RETURN nazwa_pracy;
  END PobierzNazwePracy;

  FUNCTION RoczneZarobki(id_pracownika NUMBER) RETURN NUMBER IS
    zarobki NUMBER;
  BEGIN
    SELECT (SALARY * 12) + (SALARY * 12 * COALESCE(COMMISSION_PCT, 0))
    INTO zarobki
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = id_pracownika;

    RETURN zarobki;
  END RoczneZarobki;
END PACZKA1;
/



Zadanie 2 
CREATE OR REPLACE PACKAGE PACZKA2 AS

  PROCEDURE create_region(p_region_id IN NUMBER, p_region_name IN VARCHAR2);
  PROCEDURE update_region(p_region_id IN NUMBER, p_new_region_name IN VARCHAR2);
  PROCEDURE delete_region(p_region_id IN NUMBER);
  
  FUNCTION get_region_by_id(p_region_id IN NUMBER) RETURN VARCHAR2;
  FUNCTION get_region_count RETURN NUMBER;
  FUNCTION get_all_regions RETURN SYS_REFCURSOR;
  
END PACZKA2;
/

CREATE OR REPLACE PACKAGE BODY PACZKA2 AS

  PROCEDURE create_region(p_region_id IN NUMBER, p_region_name IN VARCHAR2) IS
  BEGIN
    INSERT INTO REGIONS (REGION_ID, REGION_NAME) VALUES (p_region_id, p_region_name);
    COMMIT;
  END create_region;

  PROCEDURE update_region(p_region_id IN NUMBER, p_new_region_name IN VARCHAR2) IS
  BEGIN
    UPDATE REGIONS SET REGION_NAME = p_new_region_name WHERE REGION_ID = p_region_id;
    COMMIT;
  END update_region;

  PROCEDURE delete_region(p_region_id IN NUMBER) IS
  BEGIN
    DELETE FROM REGIONS WHERE REGION_ID = p_region_id;
    COMMIT;
  END delete_region;


  FUNCTION get_region_by_id(p_region_id IN NUMBER) RETURN VARCHAR2 IS
    v_region_name REGIONS.REGION_NAME%TYPE;
  BEGIN
    SELECT REGION_NAME INTO v_region_name FROM REGIONS WHERE REGION_ID = p_region_id;
    RETURN v_region_name;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END get_region_by_id;

  FUNCTION get_region_count RETURN NUMBER IS
    v_count NUMBER;
  BEGIN
    SELECT COUNT(*) INTO v_count FROM REGIONS;
    RETURN v_count;
  END get_region_count;

  FUNCTION get_all_regions RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
  BEGIN
    OPEN v_cursor FOR
      SELECT * FROM REGIONS;
    RETURN v_cursor;
  END get_all_regions;
END PACZKA2;
/
