Zadanie 1
CREATE TABLE ARCHIWUM_DEPARTAMENTOW
(
  id NUMBER(4,0),
  nazwa VARCHAR2(30 BYTE),
  data_zamknięcia DATE,
  ostatni_manager VARCHAR2(50)
);

CREATE OR REPLACE TRIGGER archiwum
AFTER DELETE ON DEPARTMENTS
FOR EACH ROW
DECLARE
  ost_manager VARCHAR2(50);
BEGIN
  SELECT CONCAT(CONCAT(e.FIRST_NAME, ' '), e.LAST_NAME)
  INTO ost_manager
  FROM EMPLOYEES e
  WHERE e.EMPLOYEE_ID = :OLD.MANAGER_ID;

  INSERT INTO ARCHIWUM_DEPARTAMENTOW
    (id, nazwa, data_zamknięcia, ostatni_manager)
  VALUES
    (:OLD.DEPARTMENT_ID, :OLD.DEPARTMENT_NAME, SYSDATE, ost_manager);
END;
/

DELETE FROM DEPARTMENTS WHERE DEPARTMENT_ID = 70;

SELECT * FROM ARCHIWUM_DEPARTAMENTOW;


Zadanie 2
CREATE TABLE ZLODZIEJ
(
  id NUMBER(15),
  euser VARCHAR2(20),
  czas_zmiany TIMESTAMP
);

CREATE OR REPLACE TRIGGER sprawdz_zarobki
BEFORE INSERT OR UPDATE ON EMPLOYEES
FOR EACH ROW
DECLARE
BEGIN
  IF :NEW.SALARY < 2000 OR :NEW.SALARY > 26000 THEN
    INSERT INTO ZLODZIEJ (id, euser, czas_zmiany)
    VALUES (ZLODZIEJ_SEQ.NEXTVAL, USER, SYSTIMESTAMP);
  ELSE
    NULL;
  END IF;
END;
/

SET SERVEROUTPUT ON;

BEGIN
  UPDATE EMPLOYEES SET SALARY = 27000 WHERE EMPLOYEE_ID = 165;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/

SELECT * FROM ZLODZIEJ;

Zadanie 3
CREATE SEQUENCE "EMPLOYEE_SEQ"
  START WITH 1
  INCREMENT BY 1
  NOMAXVALUE
  NOCYCLE;

ALTER TABLE "EMPLOYEES"
  MODIFY ("EMPLOYEE_ID" DEFAULT "EMPLOYEE_SEQ".NEXTVAL);

CREATE OR REPLACE TRIGGER "EMPLOYEE_AUTO_INCREMENT"
BEFORE INSERT ON "EMPLOYEES"
FOR EACH ROW
BEGIN
  SELECT "EMPLOYEE_SEQ".NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;
/

ALTER TRIGGER "EMPLOYEE_AUTO_INCREMENT" ENABLE;

INSERT INTO "EMPLOYEES" 
  ("FIRST_NAME", "LAST_NAME", "EMAIL", "PHONE_NUMBER", "HIRE_DATE", "JOB_ID", "SALARY", "COMMISSION_PCT", "MANAGER_ID", "DEPARTMENT_ID")
VALUES
  ('Karolina', 'Maliszewska', 'karolina@gmail.com', '123-456-789', TO_DATE('2023-11-10', 'YYYY-MM-DD'), 'IT_PROG', 5000, NULL, 101, 20);

Zadanie 4
CREATE OR REPLACE TRIGGER operacje_zabronione
BEFORE INSERT OR UPDATE OR DELETE ON JOB_GRADES
FOR EACH ROW
BEGIN
  RAISE_APPLICATION_ERROR(-20001, 'Operacje INSERT, UPDATE i DELETE są zabronione na tabeli JOB_GRADES.');
END;
/

INSERT INTO JOB_GRADES (GRADE, MIN_SALARY, MAX_SALARY) VALUES ('C', 3001, 4000);

Zadanie 5
CREATE OR REPLACE TRIGGER zmiana_wynagrodzenia
BEFORE UPDATE ON JOBS
FOR EACH ROW
BEGIN
  :NEW.MIN_SALARY := NVL(:OLD.MIN_SALARY, :NEW.MIN_SALARY);
  :NEW.MAX_SALARY := NVL(:OLD.MAX_SALARY, :NEW.MAX_SALARY);
END;
/

UPDATE JOBS
SET MIN_SALARY = 5000, MAX_SALARY = 10000
WHERE JOB_ID = 'AD_PRES';

SELECT * FROM JOBS
WHERE JOB_ID = 'AD_PRES';